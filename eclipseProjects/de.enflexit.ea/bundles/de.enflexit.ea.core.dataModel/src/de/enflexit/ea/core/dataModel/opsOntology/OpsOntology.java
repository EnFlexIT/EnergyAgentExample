// file: OpsOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package de.enflexit.ea.core.dataModel.opsOntology;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: OpsOntology.java
 * @author ontology bean generator
 * @version 2020/09/18, 14:36:59
 */
public class OpsOntology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "Ops";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new OpsOntology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String LIVEMONITORINGUPDATE_NEWTSSEBASE64="newTsseBase64";
    public static final String LIVEMONITORINGUPDATE_AGENTID="agentID";
    public static final String LIVEMONITORINGUPDATE="LiveMonitoringUpdate";
    public static final String FIELDDATAREPLY_SCHEDULELISTXML="scheduleListXML";
    public static final String FIELDDATAREPLY_TOTALTSSES="totalTSSEs";
    public static final String FIELDDATAREPLY_MORECOMMING="moreComming";
    public static final String FIELDDATAREPLY_AGENTID="agentID";
    public static final String FIELDDATAREPLY="FieldDataReply";
    public static final String FIELDDATAREQUEST_SCHEDULERANGEDEFINITION="scheduleRangeDefinition";
    public static final String FIELDDATAREQUEST_AGENTIDS="agentIDs";
    public static final String FIELDDATAREQUEST_SETUP="setup";
    public static final String FIELDDATAREQUEST="FieldDataRequest";
    public static final String LONGVALUE_STRINGLONGVALUE="stringLongValue";
    public static final String LONGVALUE="LongValue";
    public static final String SCHEDULERANGEDEFINITION_TIMESTAMPFROM="timestampFrom";
    public static final String SCHEDULERANGEDEFINITION_INCLUDEALLSTATES="includeAllStates";
    public static final String SCHEDULERANGEDEFINITION_TIMESTAMPTO="timestampTo";
    public static final String SCHEDULERANGEDEFINITION_NUMBEROFSTATES="numberOfStates";
    public static final String SCHEDULERANGEDEFINITION="ScheduleRangeDefinition";

  /**
   * Constructor
  */
  private OpsOntology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema scheduleRangeDefinitionSchema = new ConceptSchema(SCHEDULERANGEDEFINITION);
    add(scheduleRangeDefinitionSchema, de.enflexit.ea.core.dataModel.opsOntology.ScheduleRangeDefinition.class);
    ConceptSchema longValueSchema = new ConceptSchema(LONGVALUE);
    add(longValueSchema, de.enflexit.ea.core.dataModel.opsOntology.LongValue.class);

    // adding AgentAction(s)
    AgentActionSchema fieldDataRequestSchema = new AgentActionSchema(FIELDDATAREQUEST);
    add(fieldDataRequestSchema, de.enflexit.ea.core.dataModel.opsOntology.FieldDataRequest.class);
    AgentActionSchema fieldDataReplySchema = new AgentActionSchema(FIELDDATAREPLY);
    add(fieldDataReplySchema, de.enflexit.ea.core.dataModel.opsOntology.FieldDataReply.class);
    AgentActionSchema liveMonitoringUpdateSchema = new AgentActionSchema(LIVEMONITORINGUPDATE);
    add(liveMonitoringUpdateSchema, de.enflexit.ea.core.dataModel.opsOntology.LiveMonitoringUpdate.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    scheduleRangeDefinitionSchema.add(SCHEDULERANGEDEFINITION_NUMBEROFSTATES, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    scheduleRangeDefinitionSchema.add(SCHEDULERANGEDEFINITION_TIMESTAMPTO, longValueSchema, ObjectSchema.OPTIONAL);
    scheduleRangeDefinitionSchema.add(SCHEDULERANGEDEFINITION_INCLUDEALLSTATES, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    scheduleRangeDefinitionSchema.add(SCHEDULERANGEDEFINITION_TIMESTAMPFROM, longValueSchema, ObjectSchema.OPTIONAL);
    longValueSchema.add(LONGVALUE_STRINGLONGVALUE, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    fieldDataRequestSchema.add(FIELDDATAREQUEST_SETUP, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    fieldDataRequestSchema.add(FIELDDATAREQUEST_AGENTIDS, (TermSchema)getSchema(BasicOntology.STRING), 0, ObjectSchema.UNLIMITED);
    fieldDataRequestSchema.add(FIELDDATAREQUEST_SCHEDULERANGEDEFINITION, scheduleRangeDefinitionSchema, ObjectSchema.OPTIONAL);
    fieldDataReplySchema.add(FIELDDATAREPLY_AGENTID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    fieldDataReplySchema.add(FIELDDATAREPLY_MORECOMMING, (TermSchema)getSchema(BasicOntology.BOOLEAN), ObjectSchema.OPTIONAL);
    fieldDataReplySchema.add(FIELDDATAREPLY_TOTALTSSES, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    fieldDataReplySchema.add(FIELDDATAREPLY_SCHEDULELISTXML, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    liveMonitoringUpdateSchema.add(LIVEMONITORINGUPDATE_AGENTID, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);
    liveMonitoringUpdateSchema.add(LIVEMONITORINGUPDATE_NEWTSSEBASE64, (TermSchema)getSchema(BasicOntology.STRING), ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
