; Thu Aug 02 11:48:52 CEST 2018
; 
;+ (version "3.3.1")
;+ (build "Build 430")

([ActivePower] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([AmberTrafficLight] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([Breaker] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([Cable] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([CEARegistrationResponse] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([EdgeState] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([ElectricalGridState] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([ElectricalGridStateUpdate] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([ElectricalMeasurement] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE)
	(%3AJADE-JAVA-CODE "public TriPhaseElectricalNodeState getElectricalNodeStateNotNull() {\n	if (this.electricalNodeState== null) this.electricalNodeState = new TriPhaseElectricalNodeState(); \n	return this.electricalNodeState;\n}"))

([ElectricalNodeState] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([ElectricalPower] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([FlexibilityOffer] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([GasMeasurement] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE)
	(%3AJADE-JAVA-CODE "public GasNodeState getGasNodeStateNotNull() {\n	if (this.gasNodeState == null) this.gasNodeState = new GasNodeState(); \n	return this.gasNodeState;\n}"))

([GasNodeState] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([GreenTrafficLight] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([GridStateAgentManagement] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([GridStateAssessment] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([GridStateAssessmentInformation] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE)
	(%3AJADE-JAVA-CODE "public GridStateAssessment getGridStateAssessmentNotNull() {\n	if (this.gridStateAssessment == null) this.gridStateAssessment = new GridStateAssessment(); \n	return this.gridStateAssessment;\n}"))

([GridStateControl] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([GridStateViolation] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([HeatNetworkNodeState] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([LongValue] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE)
	(%3AJADE-JAVA-CODE "public Long getLongValue(){\n try{\n  return Long.parseLong(getStringLongValue());\n }catch(NumberFormatException ex){\n  return null;\n }\n}\npublic void setLongValue(long value){\n setStringLongValue(\"\"+value);\n}\npublic void setLongValue(Long value){\n setStringLongValue(value.toString());\n}"))

([Measurement] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([ModbusAdapterAction] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([ModbusSetpoint] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([NodeState] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([Physical] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([Power] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([project+annotation] of  %3APROJECT-ANNOTATION

	(%3ALOCATION "C:\\Users\\mludwig\\Documents\\AgentHyGrid\\git\\hygrid\\eclipseProjects\\net.agenthygrid\\bundles\\net.agenthygrid.core.globalDataModel\\src")
	(%3AONTOLOGYNAME "HyGrid")
	(%3APACKAGE "hygrid.globalDataModel.ontology")
	(%3ASUPPORT "j2se"))

([ProxyAgentRegistrationRequest] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([ReactivePower] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([RedTrafficLight] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([ReferencePVMeasurementUpdate] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([RemoteAgentInformation] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE)
	(%3AJADE-JAVA-CODE "/**\n    * Checks if both AIDs (proxy and remote) have been set\n    * @return Are both AIDs available?\n    */\n   public boolean isComplete(){\n	   return (this.proxyAgentAID != null && this.remoteAgentAID != null);\n   }"))

([RemoteAgentRegistrationRequest] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([RequestValues] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([Sensor] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([SetModbusSetpoints] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([SlackNodeSetVoltageLevelNotification] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([TestbedAgentManagement] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([TrafficLight] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([TriPhaseElectricalNodeState] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE)
	(%3AJADE-JAVA-CODE "public UniPhaseElectricalNodeState getL1NotNull() {\n	if (this.l1 == null) this.l1 = new UniPhaseElectricalNodeState();\n	return this.l1;\n}\n\npublic UniPhaseElectricalNodeState getL2NotNull() {\n	if (this.l2 == null) this.l2 = new UniPhaseElectricalNodeState();\n	return this.l2;\n}\n\npublic UniPhaseElectricalNodeState getL3NotNull() {\n	if (this.l3 == null) this.l3 = new UniPhaseElectricalNodeState();\n	return this.l3;\n}"))

([UniPhaseElectricalNodeState] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE)
	(%3AJADE-JAVA-CODE "public double getPCalculated() {\n return getS() * this.getCosPhi();\n}\npublic double getQCalculated() {\n return Math.sqrt(Math.pow(this.getS(), 2) - Math.pow(this.getP(), 2));  \n}\npublic double getSCalculated() {\n return this.getVoltageAbs() * this.getCurrent(); \n}"))

([UnitValue] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE)
	(%3AJADE-JAVA-CODE "/**\n * Instantiates a new unit value.\n */\n public UnitValue() { }\n /**\n * Instantiates a new unit value.\n *\n * @param value the value\n * @param unit the unit\n */\n public UnitValue(float value, String unit) {\n  this.setValue(value);\n  this.setUnit(unit);\n }"))

([VoltageBand] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([VoltageBandInformation] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE)
	(%3AJADE-JAVA-CODE "public VoltageBand getVoltageBandNotNull() {\n	if (this.voltageBand == null) this.voltageBand = new VoltageBand(); \n	return this.voltageBand;\n}"))

([WeatherData] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))

([WeatherDataUpdate] of  %3AJADE-CLASS

	(%3AJADE-IGNORE FALSE))
